// This autogenerated skeleton file illustrates how to build a server.

// You should copy it to another filename to avoid overwriting it.
#include <list>

#include "gen-cpp/Example.h"
#include "gen-cpp/EventHandler.h"
#include "thrift_service.h"

class ExampleHandler : virtual public ExampleIf, public thrift_registable_server<EventHandlerClient>{
public:

  ExampleHandler() {}

  void ping() {}

  bool registerHandler(const int16_t event_port) {
    return register_client(event_port);
  }

  void wait() {
    printf("Processing request: %d\n", m_requestNumber);

    sleep(1);
    printf("Notifying clients: %d\n", m_requestNumber);
    notify_clients([ = ](EventHandlerClient &client) -> void {
      client.event(m_requestNumber);
    });

    ++m_requestNumber;
  }

private:

  std::list<boost::shared_ptr<EventHandlerClient> >m_clients;
  int m_requestNumber = 0;
  int m_clientNumber  = 0;
};

class MainThread : public Runnable {
public:

  MainThread() {}

  virtual ~MainThread() {}

  virtual void run() {
    while (true) {
      printf("Doing hardwork!\n");
      sleep(5);
    }
  }
};

int main(int argc, char **argv) {
  uint16_t port            = 9090;
  uint16_t io_thread_count = 1;

  boost::shared_ptr<thrift_server<ExampleIf, ExampleProcessor> > service(
    new thrift_server<ExampleIf, ExampleProcessor>(port, io_thread_count, new ExampleHandler()));
  service->add_and_start_worker_thread(new MainThread());
  service->run();
  return 0;
}
